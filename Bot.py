import telebot
import json
import os
import schedule
import time
import threading
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

TOKEN = "7346650474:AAHiw9SRCpJV09cqRFrgNZg66OU6-oU3WDU"

FIRST_VIDEO_URL = "https://drive.google.com/file/d/1hWgxrGfhDbNFpQB_iSCUKP_k69MtGIJodw/view?usp=drive_link"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
USERS_FILE = 'users.json'
users = set()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = 'config.json'

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
administrators = {447640188, 600164937, 339175430}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
def load_users():
    global users
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as file:
            users = set(map(int, json.load(file)))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞
    except (FileNotFoundError, json.JSONDecodeError):
        print("–§–∞–π–ª users.json –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        users = set()

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
def save_users():
    with open(USERS_FILE, 'w', encoding='utf-8') as file:
        json.dump(list(users), file, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(user_id):
    if user_id not in users:
        users.add(user_id)
        save_users()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def load_config():
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç
        return {
            "content_type": "text_with_button",
            "text": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start.",
            "button_text": "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∏–¥–µ–æ",
            "button_url": "https://example.com/video",
            "photo": None,
            "video": None,
            "voice": None,
            "document": None
        }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def save_config(config):
    with open(CONFIG_FILE, 'w', encoding='utf-8') as file:
        json.dump(config, file, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
load_users()

bot = telebot.TeleBot(TOKEN)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    if user_id not in users:
        add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    markup = InlineKeyboardMarkup()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞
    if "button" in config["content_type"]:
        markup.add(InlineKeyboardButton(config["button_text"], url=config["button_url"]))
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    try:
        if config["content_type"] == "text":
            bot.send_message(user_id, config["text"])
        
        elif config["content_type"] == "text_with_button":
            bot.send_message(user_id, config["text"], reply_markup=markup)
        
        elif config["content_type"] == "photo":
            bot.send_photo(user_id, config["photo"])
        
        elif config["content_type"] == "photo_with_button":
            bot.send_photo(user_id, config["photo"], caption=config.get("text", ""), reply_markup=markup)
        
        elif config["content_type"] == "video":
            bot.send_video(user_id, config["video"])
        
        elif config["content_type"] == "voice":
            bot.send_voice(user_id, config["voice"])
        
        elif config["content_type"] == "document":
            bot.send_document(user_id, config["document"])
        
        elif config["content_type"] == "text_with_video":
            bot.send_video(user_id, config["video"], caption=config["text"])
        
        elif config["content_type"] == "text_with_video_button":
            bot.send_video(user_id, config["video"], caption=config["text"], reply_markup=markup)
        
        elif config["content_type"] == "text_with_voice":
            bot.send_voice(user_id, config["voice"], caption=config["text"])
        
        elif config["content_type"] == "text_with_document":
            bot.send_document(user_id, config["document"], caption=config["text"])
        
        elif config["content_type"] == "photo_with_text":
            bot.send_photo(user_id, config["photo"], caption=config["text"])
        
        elif config["content_type"] == "photo_with_text_button":
            bot.send_photo(user_id, config["photo"], caption=config["text"], reply_markup=markup)
        
        else:
            bot.send_message(user_id, "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

@bot.message_handler(func=lambda message: message.text.lower() == "—Å—Ç–∞—Ä—Ç")
def handle_text_start(message):
    send_welcome(message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@bot.message_handler(commands=['set_start_content'])
def set_start_content(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    menu = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
        "1. –¢–µ–∫—Å—Ç\n"
        "2. –¢–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π\n"
        "3. –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ\n"
        "4. –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–æ–π\n"
        "5. –¢–µ–∫—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "6. –¢–µ–∫—Å—Ç —Å —Ñ–∞–π–ª–æ–º\n"
        "7. –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "8. –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π"
    )
    bot.reply_to(message, menu)
    bot.register_next_step_handler(message, process_content_type)

def process_content_type(message):
    content_type = message.text.strip().lower()
    valid_types = {
        "1": "text",
        "2": "text_with_button",
        "3": "text_with_video",
        "4": "text_with_video_button",
        "5": "text_with_voice",
        "6": "text_with_document",
        "7": "photo_with_text",
        "8": "photo_with_text_button"
    }
    
    if content_type not in valid_types:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return
    
    config = load_config()
    config["content_type"] = valid_types[content_type]
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if any(t in config["content_type"] for t in ["text", "photo", "video", "voice", "document"]):
        bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(message, lambda m: process_main_text(m, config))
    
    # –î–ª—è —Ç–∏–ø–æ–≤ —Ç–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞
    elif config["content_type"] in ["photo", "video", "voice", "document"]:
        bot.reply_to(message, f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {config['content_type']}:")
        bot.register_next_step_handler(message, lambda m: process_media(m, config))

def process_main_text(message, config):
    config["text"] = message.text
    
    if config["content_type"] in ["text_with_button", "text_with_video_button", "photo_with_text_button"]:
        bot.reply_to(message, "üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        bot.register_next_step_handler(message, lambda m: process_button_text(m, config))
    
    elif config["content_type"] in ["text_with_video", "text_with_video_button"]:
        bot.reply_to(message, "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")
        bot.register_next_step_handler(message, lambda m: process_video(m, config))
    
    elif config["content_type"] == "text_with_voice":
        bot.reply_to(message, "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, lambda m: process_voice(m, config))
    
    elif config["content_type"] == "text_with_document":
        bot.reply_to(message, "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:")
        bot.register_next_step_handler(message, lambda m: process_document(m, config))
    
    elif config["content_type"] in ["photo_with_text", "photo_with_text_button"]:
        bot.reply_to(message, "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        bot.register_next_step_handler(message, lambda m: process_photo(m, config))
    
    else:
        save_config(config)
        bot.reply_to(message, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

def process_button_text(message, config):
    config["button_text"] = message.text
    bot.reply_to(message, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    bot.register_next_step_handler(message, lambda m: process_button_url(m, config))

def process_button_url(message, config):
    config["button_url"] = message.text
    save_config(config)
    bot.reply_to(message, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

def process_photo(message, config):
    if message.content_type != 'photo':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    config["photo"] = message.photo[-1].file_id
    if config["content_type"] == "photo_with_text_button":
        bot.reply_to(message, "üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        bot.register_next_step_handler(message, lambda m: process_button_text(m, config))
    else:
        save_config(config)
        bot.reply_to(message, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

def process_video(message, config):
    if message.content_type != 'video':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
        return
    config["video"] = message.video.file_id
    if config["content_type"] == "text_with_video_button":
        bot.reply_to(message, "üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        bot.register_next_step_handler(message, lambda m: process_button_text(m, config))
    else:
        save_config(config)
        bot.reply_to(message, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

def process_voice(message, config):
    if message.content_type != 'voice':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    config["voice"] = message.voice.file_id
    save_config(config)
    bot.reply_to(message, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

def process_document(message, config):
    if message.content_type != 'document':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    config["document"] = message.document.file_id
    save_config(config)
    bot.reply_to(message, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


@bot.message_handler(commands=['add_admin'])
def add_admin(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    command_parts = message.text.split()
    if len(command_parts) < 2:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_admin user_id")
        return
    
    try:
        new_admin_id = int(command_parts[1])
        administrators.add(new_admin_id)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    except ValueError:
        bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@bot.message_handler(commands=['list_users'])
def list_users(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Å–ø–∏—Å–∫–∞
    load_users()
    
    if users:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n" + "\n".join(map(str, users)))
    else:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")

from datetime import datetime

@bot.message_handler(commands=['delay_message'])
def delay_message(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    menu = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
        "1. –¢–µ–∫—Å—Ç\n"
        "2. –¢–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π\n"
        "3. –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ\n"
        "4. –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–æ–π(–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)\n"
        "5. –¢–µ–∫—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "6. –¢–µ–∫—Å—Ç —Å —Ñ–∞–π–ª–æ–º\n"
        "7. –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "8. –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π(–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
    )
    bot.reply_to(message, menu)
    bot.register_next_step_handler(message, process_delay_content_type)

def process_delay_content_type(message):
    content_type = message.text.strip().lower()
    valid_types = {
        "1": "text",
        "2": "text_with_button",
        "3": "text_with_video",
        "4": "text_with_video_button",
        "5": "text_with_voice",
        "6": "text_with_document",
        "7": "photo_with_text",
        "8": "photo_with_text_button"
    }
    
    if content_type not in valid_types:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    context = {"content_type": valid_types[content_type]}
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
    if any(t in context["content_type"] for t in ["text", "photo", "video", "voice", "document"]):
        bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(message, process_delay_main_text, context)
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        process_delay_main_text(message, context)

def process_delay_main_text(message, context):
    if "text" in context["content_type"]:
        context["text"] = message.text.strip()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if context["content_type"] in ["text_with_button", "text_with_video_button", "photo_with_text_button"]:
        bot.reply_to(message, "üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        bot.register_next_step_handler(message, process_delay_button_text, context)
    elif context["content_type"] in ["text_with_video", "text_with_video_button"]:
        bot.reply_to(message, "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")
        bot.register_next_step_handler(message, process_delay_video, context)
    elif context["content_type"] == "text_with_voice":
        bot.reply_to(message, "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, process_delay_voice, context)
    elif context["content_type"] == "text_with_document":
        bot.reply_to(message, "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:")
        bot.register_next_step_handler(message, process_delay_document, context)
    elif context["content_type"] in ["photo_with_text", "photo_with_text_button"]:
        bot.reply_to(message, "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        bot.register_next_step_handler(message, process_delay_photo, context)
    else:
        # –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω—É–∂–Ω—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°:")
        bot.register_next_step_handler(message, process_delay_datetime, context)

def process_delay_button_text(message, context):
    context["button_text"] = message.text.strip()
    bot.reply_to(message, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    bot.register_next_step_handler(message, process_delay_button_url, context)

def process_delay_button_url(message, context):
    context["button_url"] = message.text.strip()
    bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°:")
    bot.register_next_step_handler(message, process_delay_datetime, context)

def process_delay_video(message, context):
    if message.content_type != 'video':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
        return
    context["video"] = message.video.file_id
    bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°:")
    bot.register_next_step_handler(message, process_delay_datetime, context)

def process_delay_voice(message, context):
    if message.content_type != 'voice':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    context["voice"] = message.voice.file_id
    bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°:")
    bot.register_next_step_handler(message, process_delay_datetime, context)

def process_delay_document(message, context):
    if message.content_type != 'document':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    context["document"] = message.document.file_id
    bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°:")
    bot.register_next_step_handler(message, process_delay_datetime, context)

def process_delay_photo(message, context):
    if message.content_type != 'photo':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    context["photo"] = message.photo[-1].file_id
    bot.reply_to(message, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°:")
    bot.register_next_step_handler(message, process_delay_datetime, context)

def process_delay_datetime(message, context):
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        datetime_str = message.text.strip()
        scheduled_time = datetime.strptime(datetime_str, "%d-%m-%Y %H:%M:%S")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if scheduled_time <= datetime.now():
            bot.reply_to(message, "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        context["scheduled_time"] = scheduled_time
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        threading.Thread(target=send_delayed_content, args=(context,)).start()
        bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {scheduled_time.strftime('%d-%m-%Y %H:%M:%S')}.")
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì –ß–ß:–ú–ú:–°–°.")

def send_delayed_content(context):
    # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    delay = (context["scheduled_time"] - datetime.now()).total_seconds()
    if delay > 0:
        time.sleep(delay)
    
    for user in users:
        try:
            if context["content_type"] == "text":
                bot.send_message(user, context["text"])
            elif context["content_type"] == "text_with_button":
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(context["button_text"], url=context["button_url"]))
                bot.send_message(user, context["text"], reply_markup=markup)
            elif context["content_type"] == "text_with_video":
                bot.send_video(user, context["video"], caption=context["text"])
            elif context["content_type"] == "text_with_video_button":
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(context["button_text"], url=context["button_url"]))
                bot.send_video(user, context["video"], caption=context["text"], reply_markup=markup)
            elif context["content_type"] == "text_with_voice":
                bot.send_voice(user, context["voice"], caption=context["text"])
            elif context["content_type"] == "text_with_document":
                bot.send_document(user, context["document"], caption=context["text"])
            elif context["content_type"] == "photo_with_text":
                bot.send_photo(user, context["photo"], caption=context["text"])
            elif context["content_type"] == "photo_with_text_button":
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(context["button_text"], url=context["button_url"]))
                bot.send_photo(user, context["photo"], caption=context["text"], reply_markup=markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user}: {e}")

@bot.message_handler(commands=['send_all'])
def send_any_content(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    menu = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
        "1. –¢–µ–∫—Å—Ç\n"
        "2. –¢–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π\n"
        "3. –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ\n"
        "4. –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–æ–π(–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)\n"
        "5. –¢–µ–∫—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "6. –¢–µ–∫—Å—Ç —Å —Ñ–∞–π–ª–æ–º\n"
        "7. –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "8. –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π (–ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
    )
    bot.reply_to(message, menu)
    bot.register_next_step_handler(message, process_content_type)

def process_content_type(message):
    content_type = message.text.strip().lower()
    valid_types = {
        "1": "text",
        "2": "text_with_button",
        "3": "text_with_video",
        "4": "text_with_video_button",
        "5": "text_with_voice",
        "6": "text_with_document",
        "7": "photo_with_text",
        "8": "photo_with_text_button"
    }
    
    if content_type not in valid_types:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    context = {"content_type": valid_types[content_type]}
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
    if any(t in context["content_type"] for t in ["text", "photo", "video", "voice", "document"]):
        bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(message, process_main_text, context)
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω—É–∂–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        process_main_text(message, context)

def process_main_text(message, context):
    if "text" in context["content_type"]:
        context["text"] = message.text.strip()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if context["content_type"] in ["text_with_button", "text_with_video_button", "photo_with_text_button"]:
        bot.reply_to(message, "üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        bot.register_next_step_handler(message, process_button_text, context)
    elif context["content_type"] in ["text_with_video", "text_with_video_button"]:
        bot.reply_to(message, "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")
        bot.register_next_step_handler(message, process_video, context)
    elif context["content_type"] == "text_with_voice":
        bot.reply_to(message, "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, process_voice, context)
    elif context["content_type"] == "text_with_document":
        bot.reply_to(message, "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:")
        bot.register_next_step_handler(message, process_document, context)
    elif context["content_type"] in ["photo_with_text", "photo_with_text_button"]:
        bot.reply_to(message, "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        bot.register_next_step_handler(message, process_photo, context)
    else:
        # –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω—É–∂–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        send_content_to_all(message, context)

def process_button_text(message, context):
    context["button_text"] = message.text.strip()
    bot.reply_to(message, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    bot.register_next_step_handler(message, process_button_url, context)

def process_button_url(message, context):
    context["button_url"] = message.text.strip()
    send_content_to_all(message, context)

def process_video(message, context):
    if message.content_type != 'video':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
        return
    context["video"] = message.video.file_id
    send_content_to_all(message, context)

def process_voice(message, context):
    if message.content_type != 'voice':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    context["voice"] = message.voice.file_id
    send_content_to_all(message, context)

def process_document(message, context):
    if message.content_type != 'document':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    context["document"] = message.document.file_id
    send_content_to_all(message, context)

def process_photo(message, context):
    if message.content_type != 'photo':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    context["photo"] = message.photo[-1].file_id
    send_content_to_all(message, context)

def send_content_to_all(message, context):
    content_type = context["content_type"]
    text = context.get("text", "")
    
    for user in users:
        try:
            if content_type == "text":
                bot.send_message(user, text)
            elif content_type == "text_with_button":
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(context["button_text"], url=context["button_url"]))
                bot.send_message(user, text, reply_markup=markup)
            elif content_type == "text_with_video":
                bot.send_video(user, context["video"], caption=text)
            elif content_type == "text_with_video_button":
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(context["button_text"], url=context["button_url"]))
                bot.send_video(user, context["video"], caption=text, reply_markup=markup)
            elif content_type == "text_with_voice":
                bot.send_voice(user, context["voice"], caption=text)
            elif content_type == "text_with_document":
                bot.send_document(user, context["document"], caption=text)
            elif content_type == "photo_with_text":
                bot.send_photo(user, context["photo"], caption=text)
            elif content_type == "photo_with_text_button":
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(context["button_text"], url=context["button_url"]))
                bot.send_photo(user, context["photo"], caption=text, reply_markup=markup)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {user}: {e}")
    
    bot.reply_to(message, "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!")

@bot.message_handler(commands=['send_selfie'])
def send_selfie_request(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['video_note'])
def send_selfie_to_all(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è
    video_note_id = message.video_note.file_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user in users:
        try:
            bot.send_video_note(user, video_note_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user}: {e}")

            # –ö–æ–º–∞–Ω–¥–∞ /create_magnet
@bot.message_handler(commands=['create_magnet'])
def create_magnet(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    bot.reply_to(message, "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:")
    bot.register_next_step_handler(message, process_magnet_keyword)

def process_magnet_keyword(message):
    keyword = message.text.strip().lower()
    if not keyword:
        bot.reply_to(message, "‚ùå –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    config = load_config()
    if "magnets" not in config:
        config["magnets"] = {}
    
    if keyword in config["magnets"]:
        bot.reply_to(message, f"‚ùå –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    config["magnets"][keyword] = {}
    save_config(config)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    menu = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n"
        "1. –¢–µ–∫—Å—Ç\n"
        "2. –¢–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π\n"
        "3. –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ\n"
        "4. –¢–µ–∫—Å—Ç —Å –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–æ–π\n"
        "5. –¢–µ–∫—Å—Ç —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
        "6. –¢–µ–∫—Å—Ç —Å —Ñ–∞–π–ª–æ–º\n"
        "7. –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º\n"
        "8. –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π"
    )
    bot.reply_to(message, menu)
    bot.register_next_step_handler(message, lambda m: process_magnet_content_type(m, keyword))

def process_magnet_content_type(message, keyword):
    content_type = message.text.strip().lower()
    valid_types = {
        "1": "text",
        "2": "text_with_button",
        "3": "text_with_video",
        "4": "text_with_video_button",
        "5": "text_with_voice",
        "6": "text_with_document",
        "7": "photo_with_text",
        "8": "photo_with_text_button"
    }
    
    if content_type not in valid_types:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        return
    
    config = load_config()
    config["magnets"][keyword]["content_type"] = valid_types[content_type]
    save_config(config)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if any(t in config["magnets"][keyword]["content_type"] for t in ["text", "photo", "video", "voice", "document"]):
        bot.reply_to(message, "üìù –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(message, lambda m: process_magnet_main_text(m, keyword))
    
    # –î–ª—è —Ç–∏–ø–æ–≤ —Ç–æ–ª—å–∫–æ —Å –º–µ–¥–∏–∞
    elif config["magnets"][keyword]["content_type"] in ["photo", "video", "voice", "document"]:
        bot.reply_to(message, f"üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {config['magnets'][keyword]['content_type']}:")
        bot.register_next_step_handler(message, lambda m: process_magnet_media(m, keyword))

def process_magnet_main_text(message, keyword):
    config = load_config()
    config["magnets"][keyword]["text"] = message.text
    save_config(config)
    
    if config["magnets"][keyword]["content_type"] in ["text_with_button", "text_with_video_button", "photo_with_text_button"]:
        bot.reply_to(message, "üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        bot.register_next_step_handler(message, lambda m: process_magnet_button_text(m, keyword))
    
    elif config["magnets"][keyword]["content_type"] in ["text_with_video", "text_with_video_button"]:
        bot.reply_to(message, "üé• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:")
        bot.register_next_step_handler(message, lambda m: process_magnet_video(m, keyword))
    
    elif config["magnets"][keyword]["content_type"] == "text_with_voice":
        bot.reply_to(message, "üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        bot.register_next_step_handler(message, lambda m: process_magnet_voice(m, keyword))
    
    elif config["magnets"][keyword]["content_type"] == "text_with_document":
        bot.reply_to(message, "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:")
        bot.register_next_step_handler(message, lambda m: process_magnet_document(m, keyword))
    
    elif config["magnets"][keyword]["content_type"] in ["photo_with_text", "photo_with_text_button"]:
        bot.reply_to(message, "üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:")
        bot.register_next_step_handler(message, lambda m: process_magnet_photo(m, keyword))
    
    else:
        bot.reply_to(message, f"‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —Å–æ–∑–¥–∞–Ω–æ!")

def process_magnet_button_text(message, keyword):
    config = load_config()
    config["magnets"][keyword]["button_text"] = message.text
    save_config(config)
    
    bot.reply_to(message, "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
    bot.register_next_step_handler(message, lambda m: process_magnet_button_url(m, keyword))

def process_magnet_button_url(message, keyword):
    config = load_config()
    config["magnets"][keyword]["button_url"] = message.text
    save_config(config)
    
    bot.reply_to(message, f"‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —Å–æ–∑–¥–∞–Ω–æ!")

def process_magnet_photo(message, keyword):
    if message.content_type != 'photo':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    
    config = load_config()
    config["magnets"][keyword]["photo"] = message.photo[-1].file_id
    save_config(config)
    
    if config["magnets"][keyword]["content_type"] == "photo_with_text_button":
        bot.reply_to(message, "üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        bot.register_next_step_handler(message, lambda m: process_magnet_button_text(m, keyword))
    else:
        bot.reply_to(message, f"‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —Å–æ–∑–¥–∞–Ω–æ!")

def process_magnet_video(message, keyword):
    if message.content_type != 'video':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ.")
        return
    
    config = load_config()
    config["magnets"][keyword]["video"] = message.video.file_id
    save_config(config)
    
    if config["magnets"][keyword]["content_type"] == "text_with_video_button":
        bot.reply_to(message, "üñã –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
        bot.register_next_step_handler(message, lambda m: process_magnet_button_text(m, keyword))
    else:
        bot.reply_to(message, f"‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —Å–æ–∑–¥–∞–Ω–æ!")

def process_magnet_voice(message, keyword):
    if message.content_type != 'voice':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    config = load_config()
    config["magnets"][keyword]["voice"] = message.voice.file_id
    save_config(config)
    
    bot.reply_to(message, f"‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —Å–æ–∑–¥–∞–Ω–æ!")

def process_magnet_document(message, keyword):
    if message.content_type != 'document':
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    
    config = load_config()
    config["magnets"][keyword]["document"] = message.document.file_id
    save_config(config)
    
    bot.reply_to(message, f"‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' —Å–æ–∑–¥–∞–Ω–æ!")


import re

# –ö–æ–º–∞–Ω–¥–∞ /delete_magnet
@bot.message_handler(commands=['delete_magnet'])
def delete_magnet(message):
    if message.chat.id not in administrators:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    bot.register_next_step_handler(message, process_delete_magnet)

def process_delete_magnet(message):
    keyword = message.text.strip().lower()
    config = load_config()
    
    if "magnets" in config and keyword in config["magnets"]:
        del config["magnets"][keyword]
        save_config(config)
        bot.reply_to(message, f'‚úÖ –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ "{keyword}" –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.')
    else:
        bot.reply_to(message, f'‚ùå –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ "{keyword}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤
@bot.message_handler(func=lambda message: True)
def handle_keywords(message):
    text = message.text.strip().lower()
    config = load_config()
    
    if "magnets" in config and text in config["magnets"]:
        magnet = config["magnets"][text]
        content_type = magnet["content_type"]
        text_content = magnet.get("text", "")
        
        if content_type == "text":
            bot.send_message(message.chat.id, text_content)
        
        elif content_type == "text_with_button":
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(magnet["button_text"], url=magnet["button_url"]))
            bot.send_message(message.chat.id, text_content, reply_markup=markup)
        
        elif content_type == "text_with_video":
            bot.send_video(message.chat.id, magnet["video"], caption=text_content)
        
        elif content_type == "text_with_video_button":
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(magnet["button_text"], url=magnet["button_url"]))
            bot.send_video(message.chat.id, magnet["video"], caption=text_content, reply_markup=markup)
        
        elif content_type == "text_with_voice":
            bot.send_voice(message.chat.id, magnet["voice"], caption=text_content)
        
        elif content_type == "text_with_document":
            bot.send_document(message.chat.id, magnet["document"], caption=text_content)
        
        elif content_type == "photo_with_text":
            bot.send_photo(message.chat.id, magnet["photo"], caption=text_content)
        
        elif content_type == "photo_with_text_button":
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(magnet["button_text"], url=magnet["button_url"]))
            bot.send_photo(message.chat.id, magnet["photo"], caption=text_content, reply_markup=markup)
        
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")
    else:
        bot.send_message(message.chat.id, "‚ùå –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")  # –û—Ç–ª–∞–¥–∫–∞

bot.polling(none_stop=True)